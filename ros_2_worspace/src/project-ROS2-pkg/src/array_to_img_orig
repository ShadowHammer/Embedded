#include <rclcpp/rclcpp.hpp>
#include <sensor_msgs/msg/image.hpp>
#include <cv_bridge/cv_bridge.h>
#include <opencv2/opencv.hpp>
#include <fstream>
#include <iostream>
#include <sstream>
#include <string>

class CSVToGrayscaleImageNode : public rclcpp::Node {
public:
    CSVToGrayscaleImageNode() : Node("csv_to_grayscale_image_node") {
        // Get the filename parameter, or use default "last_image.csv"
        this->declare_parameter<std::string>("filename", "last_image.csv");
        filename_ = this->get_parameter("filename").as_string();

        // Load and display the grayscale image
        cv::Mat grayscale_image = readAndConvertToImage();
        if (grayscale_image.empty()) {
            RCLCPP_ERROR(this->get_logger(), "Failed to load grayscale image from CSV file.");
            rclcpp::shutdown();
        } else {
            RCLCPP_INFO(this->get_logger(), "Grayscale image loaded successfully. Displaying...");
            cv::imshow("Grayscale Image", grayscale_image);
            cv::waitKey(0);  // Wait for a key press to close the image window
        }
    }

private:
    std::string filename_;

    cv::Mat readAndConvertToImage() {
        std::ifstream file(filename_);
        if (!file.is_open()) {
            RCLCPP_ERROR(this->get_logger(), "Failed to open file: %s", filename_.c_str());
            return cv::Mat();
        }

        std::vector<std::vector<uint8_t>> grayscale_values;
        std::string line;

        while (std::getline(file, line)) {
            std::stringstream ss(line);
            std::string cell;
            std::vector<uint8_t> row;

            while (std::getline(ss, cell, ',')) {
                uint8_t grayscale_value = static_cast<uint8_t>(std::stoul(cell, nullptr, 16) & 0xFF);
                row.push_back(grayscale_value);
            }
            grayscale_values.push_back(row);
        }
        file.close();

        return createImageFromValues(grayscale_values);
    }

    cv::Mat createImageFromValues(const std::vector<std::vector<uint8_t>> &values) {
        int rows = values.size();
        int cols = rows > 0 ? values[0].size() : 0;
        cv::Mat grayscale_image(rows, cols, CV_8UC1);

        for (int i = 0; i < rows; ++i) {
            for (int j = 0; j < cols; ++j) {
                grayscale_image.at<uint8_t>(i, j) = values[i][j];
            }
        }
        return grayscale_image;
    }
};

int main(int argc, char *argv[]) {
    rclcpp::init(argc, argv);
    auto node = std::make_shared<CSVToGrayscaleImageNode>();
    rclcpp::spin(node);
    rclcpp::shutdown();
    return 0;
}

